diff --git a/.claude/file-tracking/archive/20250820_143855_Task__generate_types.log b/.claude/file-tracking/archive/20250820_143855_Task__generate_types.log
new file mode 100644
index 00000000..54b6bb5b
--- /dev/null
+++ b/.claude/file-tracking/archive/20250820_143855_Task__generate_types.log
@@ -0,0 +1,7 @@
+# Files Modified for: Task: generate-types
+# Started: 2025-08-20 14:34:56
+---
+2025-08-20 14:35:31 | /home/cory-ubuntu/coding/projects/env-manager/bin/env-manager-cli.mjs | Modified file
+2025-08-20 14:36:22 | /home/cory-ubuntu/coding/projects/env-manager/bin/env-manager-cli.mjs | Modified file
+2025-08-20 14:37:43 | /home/cory-ubuntu/coding/projects/env-manager/bin/env-manager-types.mjs | Created new file
+2025-08-20 14:38:14 | /home/cory-ubuntu/coding/projects/env-manager/bin/env-manager-cli.mjs | Modified file
diff --git a/.claude/tasks/.last-task b/.claude/tasks/.last-task
index 7eb9948c..324cfad3 100644
--- a/.claude/tasks/.last-task
+++ b/.claude/tasks/.last-task
@@ -1 +1 @@
-Test AI-friendly task completion|TODO
+Add generate-types command to CLI|TODO
diff --git a/.claude/tasks/.task-history.log b/.claude/tasks/.task-history.log
index cb4e843a..cce4410d 100644
--- a/.claude/tasks/.task-history.log
+++ b/.claude/tasks/.task-history.log
@@ -21,3 +21,4 @@
 2025-08-20 12:15:40|MOVE|Fix tough-cookie Prototype Pollution vulnerability|TODO|COMPLETED
 2025-08-20 12:15:41|MOVE|Fix request package SSRF vulnerability|TODO|COMPLETED
 2025-08-20 12:19:37|ADD|Test AI-friendly task completion||TODO
+2025-08-20 14:34:49|ADD|Add generate-types command to CLI||TODO
diff --git a/.claude/tasks/.validation-cache b/.claude/tasks/.validation-cache
index 7533afbf..e310be11 100644
--- a/.claude/tasks/.validation-cache
+++ b/.claude/tasks/.validation-cache
@@ -1 +1 @@
-1755710011
+1755718735
diff --git a/.claude/tasks/.validation-log b/.claude/tasks/.validation-log
index 8aeccc8d..acd3a36b 100644
--- a/.claude/tasks/.validation-log
+++ b/.claude/tasks/.validation-log
@@ -10,3 +10,7 @@ Errors: 0, Warnings: 0
 ✓ pnpm run typecheck
 Errors: 0, Warnings: 0
 ---
+2025-08-20T14:38:55-05:00 | Mode: pre-complete
+✓ pnpm run typecheck
+Errors: 0, Warnings: 0
+---
diff --git a/bin/env-manager-cli.mjs b/bin/env-manager-cli.mjs
index ee67d538..c13dd3b5 100755
--- a/bin/env-manager-cli.mjs
+++ b/bin/env-manager-cli.mjs
@@ -924,6 +924,35 @@ program
     })
   })
 
+program
+  .command('generate-types')
+  .description('Generate TypeScript type definitions for environment variables')
+  .option('-o, --output <dir>', 'Output directory for generated types', '.')
+  .option('-p, --project <path>', 'Project directory path', process.cwd())
+  .action(async (options) => {
+    // Use the standalone types generator script
+    const { spawn } = await import('child_process')
+    const typesGeneratorPath = path.join(__dirname, 'env-manager-types.mjs')
+    
+    // Build arguments for the types generator
+    const args = []
+    if (options.project && options.project !== process.cwd()) {
+      args.push('-p', options.project)
+    }
+    if (options.output && options.output !== '.') {
+      args.push('-o', options.output)
+    }
+    
+    // Execute the types generator
+    const child = spawn('node', [typesGeneratorPath, ...args], {
+      stdio: 'inherit'
+    })
+    
+    child.on('exit', (code) => {
+      process.exit(code || 0)
+    })
+  })
+
 program
   .command('version [action] [target]')
   .description('Switch between production and local versions')
diff --git a/bin/env-manager-types.mjs b/bin/env-manager-types.mjs
new file mode 100755
index 00000000..083b6ed1
--- /dev/null
+++ b/bin/env-manager-types.mjs
@@ -0,0 +1,438 @@
+#!/usr/bin/env node
+
+import fs from 'fs'
+import path from 'path'
+import { fileURLToPath } from 'url'
+import os from 'os'
+
+const __dirname = path.dirname(fileURLToPath(import.meta.url))
+
+// ANSI color codes
+const colors = {
+  reset: '\x1b[0m',
+  red: '\x1b[31m',
+  green: '\x1b[32m',
+  yellow: '\x1b[33m',
+  blue: '\x1b[34m',
+  cyan: '\x1b[36m',
+}
+
+function log(message, color = colors.reset) {
+  console.log(`${color}${message}${colors.reset}`)
+}
+
+// Parse command line arguments
+const args = process.argv.slice(2)
+let projectPath = process.cwd()
+let outputDir = '.'
+
+for (let i = 0; i < args.length; i++) {
+  if (args[i] === '-p' || args[i] === '--project') {
+    projectPath = path.resolve(args[i + 1])
+    i++
+  } else if (args[i] === '-o' || args[i] === '--output') {
+    outputDir = path.resolve(args[i + 1])
+    i++
+  }
+}
+
+async function generateTypes() {
+  try {
+    // Check if env.config.ts or env.config.js exists
+    const configTsPath = path.join(projectPath, 'env.config.ts')
+    const configJsPath = path.join(projectPath, 'env.config.js')
+    
+    let configPath = null
+    if (fs.existsSync(configTsPath)) {
+      configPath = configTsPath
+    } else if (fs.existsSync(configJsPath)) {
+      configPath = configJsPath
+    } else {
+      log('❌ No env.config.ts or env.config.js found in project', colors.red)
+      log('Run "env-manager init" first to create configuration', colors.yellow)
+      process.exit(1)
+    }
+    
+    // Use dynamic import with jiti for TypeScript support
+    const { createJiti } = await import('jiti')
+    const jiti = createJiti(import.meta.url, { 
+      interopDefault: true,
+      cache: false,
+      requireCache: false
+    })
+    
+    // Import the project config
+    const configModule = await jiti.import(configPath)
+    const projectConfig = configModule.default || configModule
+    
+    // Try to load existing variables from database
+    let variables = []
+    const projectName = path.basename(projectPath)
+    const dbPath = path.join(os.homedir(), '.env-manager-data', `${projectName}.db`)
+    
+    if (fs.existsSync(dbPath)) {
+      try {
+        // Try to use better-sqlite3 directly
+        const Database = await import('better-sqlite3').then(m => m.default)
+        const db = new Database(dbPath, { readonly: true })
+        
+        // Get variables from database
+        const stmt = db.prepare('SELECT * FROM variables WHERE deleted = 0')
+        variables = stmt.all() || []
+        db.close()
+      } catch (error) {
+        log('⚠️  Could not load existing variables from database', colors.yellow)
+      }
+    }
+    
+    // Generate TypeScript types
+    const types = generateTypeDefinitions(projectConfig, variables)
+    const globalTypes = generateGlobalTypeDefinitions(projectConfig, variables)
+    
+    // Write the generated types to files
+    const typesPath = path.join(outputDir, 'env.types.ts')
+    const globalTypesPath = path.join(outputDir, 'env.d.ts')
+    
+    fs.writeFileSync(typesPath, types)
+    fs.writeFileSync(globalTypesPath, globalTypes)
+    
+    log('✅ TypeScript types generated successfully!', colors.green)
+    log(`   📄 ${path.relative(process.cwd(), typesPath)}`, colors.blue)
+    log(`   📄 ${path.relative(process.cwd(), globalTypesPath)}`, colors.blue)
+    log('', colors.reset)
+    log('Import and use your typed variables:', colors.cyan)
+    log('  import { env, clientEnv, serverEnv } from "./env.types"', colors.yellow)
+    
+  } catch (error) {
+    log(`❌ Failed to generate types: ${error.message}`, colors.red)
+    console.error(error)
+    process.exit(1)
+  }
+}
+
+function generateTypeDefinitions(projectConfig, variables) {
+  const lines = []
+  
+  // Header
+  lines.push('/**')
+  lines.push(' * Auto-generated environment variable types')
+  lines.push(' * DO NOT EDIT THIS FILE DIRECTLY')
+  lines.push(' * Generated by env-manager')
+  lines.push(' */')
+  lines.push('')
+  
+  // Separate variables by type (client vs server)
+  const clientVars = []
+  const serverVars = []
+  
+  if (projectConfig.requirements) {
+    for (const [groupName, group] of Object.entries(projectConfig.requirements)) {
+      if (group.variables) {
+        for (const varConfig of group.variables) {
+          // Detect client variables (common patterns)
+          const isClient = isClientVariable(varConfig.name)
+          
+          if (isClient) {
+            clientVars.push({ config: varConfig, group: groupName })
+          } else {
+            serverVars.push({ config: varConfig, group: groupName })
+          }
+        }
+      }
+    }
+  }
+  
+  // Generate CLIENT variables interface
+  lines.push('/**')
+  lines.push(' * 🌐 CLIENT/PUBLIC Environment Variables')
+  lines.push(' * These variables are exposed to the client/browser')
+  lines.push(' * ⚠️ DO NOT put sensitive data in these variables!')
+  lines.push(' */')
+  lines.push('export interface ClientEnvVariables {')
+  
+  if (clientVars.length > 0) {
+    const grouped = groupVariables(clientVars)
+    for (const [groupName, vars] of Object.entries(grouped)) {
+      lines.push(`  // ${groupName}`)
+      for (const { config } of vars) {
+        const tsType = getTypeScriptType(config)
+        const optional = !config.required ? '?' : ''
+        if (config.description) {
+          lines.push(`  /** ${config.description} */`)
+        }
+        lines.push(`  ${config.name}${optional}: ${tsType}`)
+      }
+    }
+  } else {
+    lines.push('  // No client variables defined')
+  }
+  
+  lines.push('}')
+  lines.push('')
+  
+  // Generate SERVER variables interface
+  lines.push('/**')
+  lines.push(' * 🔒 SERVER/PRIVATE Environment Variables')
+  lines.push(' * These variables are only available on the server')
+  lines.push(' * ✅ Safe for sensitive data like API keys, passwords, etc.')
+  lines.push(' */')
+  lines.push('export interface ServerEnvVariables {')
+  
+  if (serverVars.length > 0) {
+    const grouped = groupVariables(serverVars)
+    for (const [groupName, vars] of Object.entries(grouped)) {
+      lines.push(`  // ${groupName}`)
+      for (const { config } of vars) {
+        const tsType = getTypeScriptType(config)
+        const optional = !config.required ? '?' : ''
+        if (config.description) {
+          lines.push(`  /** ${config.description} */`)
+        }
+        lines.push(`  ${config.name}${optional}: ${tsType}`)
+      }
+    }
+  } else {
+    lines.push('  // No server variables defined')
+  }
+  
+  lines.push('}')
+  lines.push('')
+  
+  // Generate combined interface
+  lines.push('/**')
+  lines.push(' * All Environment Variables (Client + Server)')
+  lines.push(' */')
+  lines.push('export interface EnvVariables extends ClientEnvVariables, ServerEnvVariables {}')
+  lines.push('')
+  
+  // Generate runtime objects
+  lines.push('/**')
+  lines.push(' * 🌐 CLIENT Environment Variables (Runtime)')
+  lines.push(' */')
+  lines.push('export const clientEnv = {')
+  
+  if (clientVars.length > 0) {
+    const grouped = groupVariables(clientVars)
+    for (const [groupName, vars] of Object.entries(grouped)) {
+      lines.push(`  // ${groupName}`)
+      for (const { config } of vars) {
+        lines.push(`  ${config.name}: process.env.${config.name} as ${getTypeScriptType(config)},`)
+      }
+    }
+  }
+  
+  lines.push('} as const satisfies ClientEnvVariables')
+  lines.push('')
+  
+  lines.push('/**')
+  lines.push(' * 🔒 SERVER Environment Variables (Runtime)')
+  lines.push(' */')
+  lines.push('export const serverEnv = {')
+  
+  if (serverVars.length > 0) {
+    const grouped = groupVariables(serverVars)
+    for (const [groupName, vars] of Object.entries(grouped)) {
+      lines.push(`  // ${groupName}`)
+      for (const { config } of vars) {
+        lines.push(`  ${config.name}: process.env.${config.name} as ${getTypeScriptType(config)},`)
+      }
+    }
+  }
+  
+  lines.push('} as const satisfies ServerEnvVariables')
+  lines.push('')
+  
+  lines.push('/**')
+  lines.push(' * All Environment Variables (Runtime)')
+  lines.push(' */')
+  lines.push('export const env = {')
+  lines.push('  ...clientEnv,')
+  lines.push('  ...serverEnv,')
+  lines.push('} as const satisfies EnvVariables')
+  lines.push('')
+  
+  // Generate type-safe getter
+  lines.push('/**')
+  lines.push(' * Type-safe environment variable getter')
+  lines.push(' */')
+  lines.push('export function getEnv<K extends keyof EnvVariables>(key: K): EnvVariables[K] {')
+  lines.push('  return env[key]')
+  lines.push('}')
+  lines.push('')
+  
+  // Generate validation functions
+  lines.push('/**')
+  lines.push(' * Validate CLIENT environment variables')
+  lines.push(' */')
+  lines.push('export function validateClientEnv(): void {')
+  lines.push('  const missing: string[] = []')
+  
+  for (const { config } of clientVars) {
+    if (config.required) {
+      lines.push(`  if (!process.env.${config.name}) {`)
+      lines.push(`    missing.push('${config.name}')`)
+      lines.push('  }')
+    }
+  }
+  
+  lines.push('  if (missing.length > 0) {')
+  lines.push('    throw new Error(`Missing required CLIENT environment variables: ${missing.join(", ")}`)') 
+  lines.push('  }')
+  lines.push('}')
+  lines.push('')
+  
+  lines.push('/**')
+  lines.push(' * Validate SERVER environment variables')
+  lines.push(' */')
+  lines.push('export function validateServerEnv(): void {')
+  lines.push('  const missing: string[] = []')
+  
+  for (const { config } of serverVars) {
+    if (config.required) {
+      lines.push(`  if (!process.env.${config.name}) {`)
+      lines.push(`    missing.push('${config.name}')`)
+      lines.push('  }')
+    }
+  }
+  
+  lines.push('  if (missing.length > 0) {')
+  lines.push('    throw new Error(`Missing required SERVER environment variables: ${missing.join(", ")}`)') 
+  lines.push('  }')
+  lines.push('}')
+  lines.push('')
+  
+  lines.push('/**')
+  lines.push(' * Validate ALL environment variables')
+  lines.push(' */')
+  lines.push('export function validateEnv(): void {')
+  lines.push('  validateClientEnv()')
+  lines.push('  validateServerEnv()')
+  lines.push('}')
+  
+  return lines.join('\n')
+}
+
+function generateGlobalTypeDefinitions(projectConfig, variables) {
+  const lines = []
+  
+  // Separate variables by type
+  const clientVars = []
+  const serverVars = []
+  
+  if (projectConfig.requirements) {
+    for (const [groupName, group] of Object.entries(projectConfig.requirements)) {
+      if (group.variables) {
+        for (const varConfig of group.variables) {
+          const isClient = isClientVariable(varConfig.name)
+          
+          if (isClient) {
+            clientVars.push({ config: varConfig, group: groupName })
+          } else {
+            serverVars.push({ config: varConfig, group: groupName })
+          }
+        }
+      }
+    }
+  }
+  
+  lines.push('/**')
+  lines.push(' * Global environment variable type declarations')
+  lines.push(' * Auto-generated by env-manager')
+  lines.push(' */')
+  lines.push('')
+  lines.push('declare global {')
+  lines.push('  namespace NodeJS {')
+  lines.push('    interface ProcessEnv {')
+  
+  // Add CLIENT variables
+  if (clientVars.length > 0) {
+    lines.push('      // 🌐 CLIENT/PUBLIC Environment Variables')
+    const grouped = groupVariables(clientVars)
+    for (const [groupName, vars] of Object.entries(grouped)) {
+      lines.push(`      // ${groupName}`)
+      for (const { config } of vars) {
+        const tsType = getTypeScriptType(config)
+        const optional = !config.required ? '?' : ''
+        if (config.description) {
+          lines.push(`      /** 🌐 CLIENT: ${config.description} */`)
+        }
+        lines.push(`      ${config.name}${optional}: ${tsType}`)
+      }
+    }
+    lines.push('')
+  }
+  
+  // Add SERVER variables
+  if (serverVars.length > 0) {
+    lines.push('      // 🔒 SERVER/PRIVATE Environment Variables')
+    const grouped = groupVariables(serverVars)
+    for (const [groupName, vars] of Object.entries(grouped)) {
+      lines.push(`      // ${groupName}`)
+      for (const { config } of vars) {
+        const tsType = getTypeScriptType(config)
+        const optional = !config.required ? '?' : ''
+        if (config.description) {
+          lines.push(`      /** 🔒 SERVER: ${config.description} */`)
+        }
+        lines.push(`      ${config.name}${optional}: ${tsType}`)
+      }
+    }
+  }
+  
+  lines.push('    }')
+  lines.push('  }')
+  lines.push('}')
+  lines.push('')
+  lines.push('export {}')
+  
+  return lines.join('\n')
+}
+
+function getTypeScriptType(varConfig) {
+  switch (varConfig.type) {
+    case 'number':
+    case 'port':
+      return 'number'
+    case 'boolean':
+      return 'boolean'
+    case 'json':
+      return 'Record<string, any>'
+    case 'url':
+    case 'email':
+    case 'path':
+    case 'string':
+    default:
+      return 'string'
+  }
+}
+
+function isClientVariable(name) {
+  const clientPatterns = [
+    /^NEXT_PUBLIC_/i,
+    /^VITE_/i,
+    /^REACT_APP_/i,
+    /^GATSBY_/i,
+    /^NUXT_PUBLIC_/i,
+    /^PUBLIC_/i,
+    /^EXPO_PUBLIC_/i,
+    /^ASTRO_PUBLIC_/i,
+  ]
+  
+  return clientPatterns.some(pattern => pattern.test(name))
+}
+
+function groupVariables(vars) {
+  const grouped = {}
+  
+  for (const variable of vars) {
+    if (!grouped[variable.group]) {
+      grouped[variable.group] = []
+    }
+    grouped[variable.group].push(variable)
+  }
+  
+  return grouped
+}
+
+// Run the generator
+generateTypes()
\ No newline at end of file
diff --git a/dist/server/entry.mjs b/dist/server/entry.mjs
index 344a1e1c..bf3740da 100644
--- a/dist/server/entry.mjs
+++ b/dist/server/entry.mjs
@@ -1,6 +1,6 @@
 import { renderers } from './renderers.mjs';
 import { c as createExports, s as serverEntrypointModule } from './chunks/_@astrojs-ssr-adapter_CiZMU4_s.mjs';
-import { manifest } from './manifest_BZVC1Yof.mjs';
+import { manifest } from './manifest_DYnk41aq.mjs';
 
 const serverIslandMap = new Map();;
 
diff --git a/dist/server/manifest_BZVC1Yof.mjs b/dist/server/manifest_DYnk41aq.mjs
similarity index 99%
rename from dist/server/manifest_BZVC1Yof.mjs
rename to dist/server/manifest_DYnk41aq.mjs
index 29b553c9..bfb95c3e 100644
--- a/dist/server/manifest_BZVC1Yof.mjs
+++ b/dist/server/manifest_DYnk41aq.mjs
@@ -93,7 +93,7 @@ function deserializeManifest(serializedManifest) {
   };
 }
 
-const manifest = deserializeManifest({"hrefRoot":"file:///home/cory-ubuntu/coding/projects/env-manager/","cacheDir":"file:///home/cory-ubuntu/coding/projects/env-manager/node_modules/.astro/","outDir":"file:///home/cory-ubuntu/coding/projects/env-manager/dist/","srcDir":"file:///home/cory-ubuntu/coding/projects/env-manager/src/","publicDir":"file:///home/cory-ubuntu/coding/projects/env-manager/public/","buildClientDir":"file:///home/cory-ubuntu/coding/projects/env-manager/dist/client/","buildServerDir":"file:///home/cory-ubuntu/coding/projects/env-manager/dist/server/","adapterName":"@astrojs/node","routes":[{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"type":"page","component":"_server-islands.astro","params":["name"],"segments":[[{"content":"_server-islands","dynamic":false,"spread":false}],[{"content":"name","dynamic":true,"spread":false}]],"pattern":"^\\/_server-islands\\/([^/]+?)\\/?$","prerender":false,"isIndex":false,"fallbackRoutes":[],"route":"/_server-islands/[name]","origin":"internal","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"type":"endpoint","isIndex":false,"route":"/_image","pattern":"^\\/_image\\/?$","segments":[[{"content":"_image","dynamic":false,"spread":false}]],"params":[],"component":"node_modules/.pnpm/astro@5.13.2_@types+node@20.19.11_jiti@2.5.1_lightningcss@1.30.1_rollup@4.46.4_typescript@5.9.2_yaml@2.8.1/node_modules/astro/dist/assets/endpoint/node.js","pathname":"/_image","prerender":false,"fallbackRoutes":[],"origin":"internal","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/auth/status","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/auth\\/status\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"auth","dynamic":false,"spread":false}],[{"content":"status","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/auth/status.ts","pathname":"/api/auth/status","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/auth","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/auth\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"auth","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/auth.ts","pathname":"/api/auth","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/branches","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/branches\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"branches","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/branches.ts","pathname":"/api/branches","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/draft","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/draft\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"draft","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/draft.ts","pathname":"/api/draft","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/export","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/export\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"export","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/export.ts","pathname":"/api/export","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/export-types","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/export-types\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"export-types","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/export-types.ts","pathname":"/api/export-types","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/generate-secret","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/generate-secret\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"generate-secret","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/generate-secret.ts","pathname":"/api/generate-secret","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/health","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/health\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"health","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/health.ts","pathname":"/api/health","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/hot-reload","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/hot-reload\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"hot-reload","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/hot-reload.ts","pathname":"/api/hot-reload","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/password","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/password\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"password","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/password.ts","pathname":"/api/password","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/project/status","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/project\\/status\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"project","dynamic":false,"spread":false}],[{"content":"status","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/project/status.ts","pathname":"/api/project/status","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/project/variable-config","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/project\\/variable-config\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"project","dynamic":false,"spread":false}],[{"content":"variable-config","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/project/variable-config.ts","pathname":"/api/project/variable-config","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/projects","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/projects\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"projects","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/projects.ts","pathname":"/api/projects","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/snapshots/[id]/restore","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/snapshots\\/([^/]+?)\\/restore\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"snapshots","dynamic":false,"spread":false}],[{"content":"id","dynamic":true,"spread":false}],[{"content":"restore","dynamic":false,"spread":false}]],"params":["id"],"component":"src/pages/api/snapshots/[id]/restore.ts","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/snapshots/[id]","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/snapshots\\/([^/]+?)\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"snapshots","dynamic":false,"spread":false}],[{"content":"id","dynamic":true,"spread":false}]],"params":["id"],"component":"src/pages/api/snapshots/[id].ts","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/snapshots","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/snapshots\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"snapshots","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/snapshots.ts","pathname":"/api/snapshots","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/variables","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/variables\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"variables","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/variables.ts","pathname":"/api/variables","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/version","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/version\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"version","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/version.ts","pathname":"/api/version","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/versions/restore","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/versions\\/restore\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"versions","dynamic":false,"spread":false}],[{"content":"restore","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/versions/restore.ts","pathname":"/api/versions/restore","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/versions","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/versions\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"versions","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/versions.ts","pathname":"/api/versions","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[{"type":"external","src":"/_astro/_slug_.BT7j3MZf.css"}],"routeData":{"route":"/","isIndex":true,"type":"page","pattern":"^\\/$","segments":[],"params":[],"component":"src/pages/index.astro","pathname":"/","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[{"type":"external","src":"/_astro/_slug_.BT7j3MZf.css"},{"type":"inline","content":"@import\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\";.retro{font-family:\"Press Start 2P\",system-ui,-apple-system,sans-serif;line-height:1.5;letter-spacing:.5px}\n"}],"routeData":{"route":"/[...slug]","isIndex":false,"type":"page","pattern":"^(?:\\/(.*?))?\\/?$","segments":[[{"content":"...slug","dynamic":true,"spread":true}]],"params":["...slug"],"component":"src/pages/[...slug].astro","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}}],"base":"/","trailingSlash":"ignore","compressHTML":true,"componentMetadata":[["/home/cory-ubuntu/coding/projects/env-manager/src/pages/[...slug].astro",{"propagation":"none","containsHead":true}],["/home/cory-ubuntu/coding/projects/env-manager/src/pages/index.astro",{"propagation":"none","containsHead":true}]],"renderers":[],"clientDirectives":[["idle","(()=>{var l=(n,t)=>{let i=async()=>{await(await n())()},e=typeof t.value==\"object\"?t.value:void 0,s={timeout:e==null?void 0:e.timeout};\"requestIdleCallback\"in window?window.requestIdleCallback(i,s):setTimeout(i,s.timeout||200)};(self.Astro||(self.Astro={})).idle=l;window.dispatchEvent(new Event(\"astro:idle\"));})();"],["load","(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).load=e;window.dispatchEvent(new Event(\"astro:load\"));})();"],["media","(()=>{var n=(a,t)=>{let i=async()=>{await(await a())()};if(t.value){let e=matchMedia(t.value);e.matches?i():e.addEventListener(\"change\",i,{once:!0})}};(self.Astro||(self.Astro={})).media=n;window.dispatchEvent(new Event(\"astro:media\"));})();"],["only","(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).only=e;window.dispatchEvent(new Event(\"astro:only\"));})();"],["visible","(()=>{var a=(s,i,o)=>{let r=async()=>{await(await s())()},t=typeof i.value==\"object\"?i.value:void 0,c={rootMargin:t==null?void 0:t.rootMargin},n=new IntersectionObserver(e=>{for(let l of e)if(l.isIntersecting){n.disconnect(),r();break}},c);for(let e of o.children)n.observe(e)};(self.Astro||(self.Astro={})).visible=a;window.dispatchEvent(new Event(\"astro:visible\"));})();"]],"entryModules":{"\u0000noop-middleware":"_noop-middleware.mjs","\u0000noop-actions":"_noop-actions.mjs","\u0000@astro-page:src/pages/api/auth/status@_@ts":"pages/api/auth/status.astro.mjs","\u0000@astro-page:src/pages/api/auth@_@ts":"pages/api/auth.astro.mjs","\u0000@astro-page:src/pages/api/branches@_@ts":"pages/api/branches.astro.mjs","\u0000@astro-page:src/pages/api/draft@_@ts":"pages/api/draft.astro.mjs","\u0000@astro-page:src/pages/api/export@_@ts":"pages/api/export.astro.mjs","\u0000@astro-page:src/pages/api/export-types@_@ts":"pages/api/export-types.astro.mjs","\u0000@astro-page:src/pages/api/generate-secret@_@ts":"pages/api/generate-secret.astro.mjs","\u0000@astro-page:src/pages/api/health@_@ts":"pages/api/health.astro.mjs","\u0000@astro-page:src/pages/api/hot-reload@_@ts":"pages/api/hot-reload.astro.mjs","\u0000@astro-page:src/pages/api/password@_@ts":"pages/api/password.astro.mjs","\u0000@astro-page:src/pages/api/project/status@_@ts":"pages/api/project/status.astro.mjs","\u0000@astro-page:src/pages/api/project/variable-config@_@ts":"pages/api/project/variable-config.astro.mjs","\u0000@astro-page:src/pages/api/projects@_@ts":"pages/api/projects.astro.mjs","\u0000@astro-page:src/pages/api/snapshots/[id]/restore@_@ts":"pages/api/snapshots/_id_/restore.astro.mjs","\u0000@astro-page:src/pages/api/snapshots/[id]@_@ts":"pages/api/snapshots/_id_.astro.mjs","\u0000@astro-page:src/pages/api/snapshots@_@ts":"pages/api/snapshots.astro.mjs","\u0000@astro-page:src/pages/api/variables@_@ts":"pages/api/variables.astro.mjs","\u0000@astro-page:src/pages/api/version@_@ts":"pages/api/version.astro.mjs","\u0000@astro-page:src/pages/api/versions/restore@_@ts":"pages/api/versions/restore.astro.mjs","\u0000@astro-page:src/pages/api/versions@_@ts":"pages/api/versions.astro.mjs","\u0000@astro-page:src/pages/index@_@astro":"pages/index.astro.mjs","\u0000@astro-page:src/pages/[...slug]@_@astro":"pages/_---slug_.astro.mjs","\u0000@astrojs-ssr-virtual-entry":"entry.mjs","\u0000@astro-renderers":"renderers.mjs","\u0000@astro-page:node_modules/.pnpm/astro@5.13.2_@types+node@20.19.11_jiti@2.5.1_lightningcss@1.30.1_rollup@4.46.4_typescript@5.9.2_yaml@2.8.1/node_modules/astro/dist/assets/endpoint/node@_@js":"pages/_image.astro.mjs","\u0000@astrojs-ssr-adapter":"_@astrojs-ssr-adapter.mjs","\u0000@astrojs-manifest":"manifest_BZVC1Yof.mjs","/home/cory-ubuntu/coding/projects/env-manager/node_modules/.pnpm/unstorage@1.16.1/node_modules/unstorage/drivers/fs-lite.mjs":"chunks/fs-lite_COtHaKzy.mjs","/home/cory-ubuntu/coding/projects/env-manager/node_modules/.pnpm/astro@5.13.2_@types+node@20.19.11_jiti@2.5.1_lightningcss@1.30.1_rollup@4.46.4_typescript@5.9.2_yaml@2.8.1/node_modules/astro/dist/assets/services/sharp.js":"chunks/sharp_DdRdiW1z.mjs","/home/cory-ubuntu/coding/projects/env-manager/src/components/MainApp":"_astro/MainApp.36csCZzh.js","@astrojs/react/client.js":"_astro/client.B7_wsQ6z.js","/home/cory-ubuntu/coding/projects/env-manager/src/components/EnvManager8Bit":"_astro/EnvManager8Bit.Bj0swT5E.js","/home/cory-ubuntu/coding/projects/env-manager/src/components/VersionFooter":"_astro/VersionFooter.DXs79lfP.js","astro:scripts/before-hydration.js":""},"inlinedScripts":[],"assets":["/_astro/_slug_.BT7j3MZf.css","/favicon.svg","/_astro/EnvManager8Bit.Bj0swT5E.js","/_astro/MainApp.36csCZzh.js","/_astro/VersionFooter.DXs79lfP.js","/_astro/_slug_.DF4pp2Vg.css","/_astro/client.B7_wsQ6z.js","/_astro/index.BSy9ry4M.js","/_astro/index.GzzYzsTh.js","/_astro/jsx-runtime.D_zvdyIk.js","/_astro/trash-2.DDpJnp0d.js","/css/styles.css"],"buildFormat":"directory","checkOrigin":true,"serverIslandNameMap":[],"key":"zFLlWP/lyps4p1Cmn5zns1A+R7d6j4/ACmzukkF+Eok=","sessionConfig":{"driver":"fs-lite","options":{"base":"/home/cory-ubuntu/coding/projects/env-manager/node_modules/.astro/sessions"}}});
+const manifest = deserializeManifest({"hrefRoot":"file:///home/cory-ubuntu/coding/projects/env-manager/","cacheDir":"file:///home/cory-ubuntu/coding/projects/env-manager/node_modules/.astro/","outDir":"file:///home/cory-ubuntu/coding/projects/env-manager/dist/","srcDir":"file:///home/cory-ubuntu/coding/projects/env-manager/src/","publicDir":"file:///home/cory-ubuntu/coding/projects/env-manager/public/","buildClientDir":"file:///home/cory-ubuntu/coding/projects/env-manager/dist/client/","buildServerDir":"file:///home/cory-ubuntu/coding/projects/env-manager/dist/server/","adapterName":"@astrojs/node","routes":[{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"type":"page","component":"_server-islands.astro","params":["name"],"segments":[[{"content":"_server-islands","dynamic":false,"spread":false}],[{"content":"name","dynamic":true,"spread":false}]],"pattern":"^\\/_server-islands\\/([^/]+?)\\/?$","prerender":false,"isIndex":false,"fallbackRoutes":[],"route":"/_server-islands/[name]","origin":"internal","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"type":"endpoint","isIndex":false,"route":"/_image","pattern":"^\\/_image\\/?$","segments":[[{"content":"_image","dynamic":false,"spread":false}]],"params":[],"component":"node_modules/.pnpm/astro@5.13.2_@types+node@20.19.11_jiti@2.5.1_lightningcss@1.30.1_rollup@4.46.4_typescript@5.9.2_yaml@2.8.1/node_modules/astro/dist/assets/endpoint/node.js","pathname":"/_image","prerender":false,"fallbackRoutes":[],"origin":"internal","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/auth/status","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/auth\\/status\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"auth","dynamic":false,"spread":false}],[{"content":"status","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/auth/status.ts","pathname":"/api/auth/status","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/auth","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/auth\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"auth","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/auth.ts","pathname":"/api/auth","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/branches","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/branches\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"branches","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/branches.ts","pathname":"/api/branches","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/draft","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/draft\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"draft","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/draft.ts","pathname":"/api/draft","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/export","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/export\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"export","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/export.ts","pathname":"/api/export","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/export-types","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/export-types\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"export-types","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/export-types.ts","pathname":"/api/export-types","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/generate-secret","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/generate-secret\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"generate-secret","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/generate-secret.ts","pathname":"/api/generate-secret","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/health","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/health\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"health","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/health.ts","pathname":"/api/health","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/hot-reload","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/hot-reload\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"hot-reload","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/hot-reload.ts","pathname":"/api/hot-reload","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/password","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/password\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"password","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/password.ts","pathname":"/api/password","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/project/status","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/project\\/status\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"project","dynamic":false,"spread":false}],[{"content":"status","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/project/status.ts","pathname":"/api/project/status","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/project/variable-config","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/project\\/variable-config\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"project","dynamic":false,"spread":false}],[{"content":"variable-config","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/project/variable-config.ts","pathname":"/api/project/variable-config","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/projects","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/projects\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"projects","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/projects.ts","pathname":"/api/projects","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/snapshots/[id]/restore","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/snapshots\\/([^/]+?)\\/restore\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"snapshots","dynamic":false,"spread":false}],[{"content":"id","dynamic":true,"spread":false}],[{"content":"restore","dynamic":false,"spread":false}]],"params":["id"],"component":"src/pages/api/snapshots/[id]/restore.ts","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/snapshots/[id]","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/snapshots\\/([^/]+?)\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"snapshots","dynamic":false,"spread":false}],[{"content":"id","dynamic":true,"spread":false}]],"params":["id"],"component":"src/pages/api/snapshots/[id].ts","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/snapshots","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/snapshots\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"snapshots","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/snapshots.ts","pathname":"/api/snapshots","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/variables","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/variables\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"variables","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/variables.ts","pathname":"/api/variables","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/version","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/version\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"version","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/version.ts","pathname":"/api/version","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/versions/restore","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/versions\\/restore\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"versions","dynamic":false,"spread":false}],[{"content":"restore","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/versions/restore.ts","pathname":"/api/versions/restore","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[],"routeData":{"route":"/api/versions","isIndex":false,"type":"endpoint","pattern":"^\\/api\\/versions\\/?$","segments":[[{"content":"api","dynamic":false,"spread":false}],[{"content":"versions","dynamic":false,"spread":false}]],"params":[],"component":"src/pages/api/versions.ts","pathname":"/api/versions","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[{"type":"external","src":"/_astro/_slug_.BT7j3MZf.css"}],"routeData":{"route":"/","isIndex":true,"type":"page","pattern":"^\\/$","segments":[],"params":[],"component":"src/pages/index.astro","pathname":"/","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}},{"file":"","links":[],"scripts":[],"styles":[{"type":"external","src":"/_astro/_slug_.BT7j3MZf.css"},{"type":"inline","content":"@import\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\";.retro{font-family:\"Press Start 2P\",system-ui,-apple-system,sans-serif;line-height:1.5;letter-spacing:.5px}\n"}],"routeData":{"route":"/[...slug]","isIndex":false,"type":"page","pattern":"^(?:\\/(.*?))?\\/?$","segments":[[{"content":"...slug","dynamic":true,"spread":true}]],"params":["...slug"],"component":"src/pages/[...slug].astro","prerender":false,"fallbackRoutes":[],"distURL":[],"origin":"project","_meta":{"trailingSlash":"ignore"}}}],"base":"/","trailingSlash":"ignore","compressHTML":true,"componentMetadata":[["/home/cory-ubuntu/coding/projects/env-manager/src/pages/[...slug].astro",{"propagation":"none","containsHead":true}],["/home/cory-ubuntu/coding/projects/env-manager/src/pages/index.astro",{"propagation":"none","containsHead":true}]],"renderers":[],"clientDirectives":[["idle","(()=>{var l=(n,t)=>{let i=async()=>{await(await n())()},e=typeof t.value==\"object\"?t.value:void 0,s={timeout:e==null?void 0:e.timeout};\"requestIdleCallback\"in window?window.requestIdleCallback(i,s):setTimeout(i,s.timeout||200)};(self.Astro||(self.Astro={})).idle=l;window.dispatchEvent(new Event(\"astro:idle\"));})();"],["load","(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).load=e;window.dispatchEvent(new Event(\"astro:load\"));})();"],["media","(()=>{var n=(a,t)=>{let i=async()=>{await(await a())()};if(t.value){let e=matchMedia(t.value);e.matches?i():e.addEventListener(\"change\",i,{once:!0})}};(self.Astro||(self.Astro={})).media=n;window.dispatchEvent(new Event(\"astro:media\"));})();"],["only","(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).only=e;window.dispatchEvent(new Event(\"astro:only\"));})();"],["visible","(()=>{var a=(s,i,o)=>{let r=async()=>{await(await s())()},t=typeof i.value==\"object\"?i.value:void 0,c={rootMargin:t==null?void 0:t.rootMargin},n=new IntersectionObserver(e=>{for(let l of e)if(l.isIntersecting){n.disconnect(),r();break}},c);for(let e of o.children)n.observe(e)};(self.Astro||(self.Astro={})).visible=a;window.dispatchEvent(new Event(\"astro:visible\"));})();"]],"entryModules":{"\u0000noop-middleware":"_noop-middleware.mjs","\u0000noop-actions":"_noop-actions.mjs","\u0000@astro-page:src/pages/api/auth/status@_@ts":"pages/api/auth/status.astro.mjs","\u0000@astro-page:src/pages/api/auth@_@ts":"pages/api/auth.astro.mjs","\u0000@astro-page:src/pages/api/branches@_@ts":"pages/api/branches.astro.mjs","\u0000@astro-page:src/pages/api/draft@_@ts":"pages/api/draft.astro.mjs","\u0000@astro-page:src/pages/api/export@_@ts":"pages/api/export.astro.mjs","\u0000@astro-page:src/pages/api/export-types@_@ts":"pages/api/export-types.astro.mjs","\u0000@astro-page:src/pages/api/generate-secret@_@ts":"pages/api/generate-secret.astro.mjs","\u0000@astro-page:src/pages/api/health@_@ts":"pages/api/health.astro.mjs","\u0000@astro-page:src/pages/api/hot-reload@_@ts":"pages/api/hot-reload.astro.mjs","\u0000@astro-page:src/pages/api/password@_@ts":"pages/api/password.astro.mjs","\u0000@astro-page:src/pages/api/project/status@_@ts":"pages/api/project/status.astro.mjs","\u0000@astro-page:src/pages/api/project/variable-config@_@ts":"pages/api/project/variable-config.astro.mjs","\u0000@astro-page:src/pages/api/projects@_@ts":"pages/api/projects.astro.mjs","\u0000@astro-page:src/pages/api/snapshots/[id]/restore@_@ts":"pages/api/snapshots/_id_/restore.astro.mjs","\u0000@astro-page:src/pages/api/snapshots/[id]@_@ts":"pages/api/snapshots/_id_.astro.mjs","\u0000@astro-page:src/pages/api/snapshots@_@ts":"pages/api/snapshots.astro.mjs","\u0000@astro-page:src/pages/api/variables@_@ts":"pages/api/variables.astro.mjs","\u0000@astro-page:src/pages/api/version@_@ts":"pages/api/version.astro.mjs","\u0000@astro-page:src/pages/api/versions/restore@_@ts":"pages/api/versions/restore.astro.mjs","\u0000@astro-page:src/pages/api/versions@_@ts":"pages/api/versions.astro.mjs","\u0000@astro-page:src/pages/index@_@astro":"pages/index.astro.mjs","\u0000@astro-page:src/pages/[...slug]@_@astro":"pages/_---slug_.astro.mjs","\u0000@astrojs-ssr-virtual-entry":"entry.mjs","\u0000@astro-renderers":"renderers.mjs","\u0000@astro-page:node_modules/.pnpm/astro@5.13.2_@types+node@20.19.11_jiti@2.5.1_lightningcss@1.30.1_rollup@4.46.4_typescript@5.9.2_yaml@2.8.1/node_modules/astro/dist/assets/endpoint/node@_@js":"pages/_image.astro.mjs","\u0000@astrojs-ssr-adapter":"_@astrojs-ssr-adapter.mjs","\u0000@astrojs-manifest":"manifest_DYnk41aq.mjs","/home/cory-ubuntu/coding/projects/env-manager/node_modules/.pnpm/unstorage@1.16.1/node_modules/unstorage/drivers/fs-lite.mjs":"chunks/fs-lite_COtHaKzy.mjs","/home/cory-ubuntu/coding/projects/env-manager/node_modules/.pnpm/astro@5.13.2_@types+node@20.19.11_jiti@2.5.1_lightningcss@1.30.1_rollup@4.46.4_typescript@5.9.2_yaml@2.8.1/node_modules/astro/dist/assets/services/sharp.js":"chunks/sharp_DdRdiW1z.mjs","/home/cory-ubuntu/coding/projects/env-manager/src/components/MainApp":"_astro/MainApp.36csCZzh.js","@astrojs/react/client.js":"_astro/client.B7_wsQ6z.js","/home/cory-ubuntu/coding/projects/env-manager/src/components/EnvManager8Bit":"_astro/EnvManager8Bit.Bj0swT5E.js","/home/cory-ubuntu/coding/projects/env-manager/src/components/VersionFooter":"_astro/VersionFooter.DXs79lfP.js","astro:scripts/before-hydration.js":""},"inlinedScripts":[],"assets":["/_astro/_slug_.BT7j3MZf.css","/favicon.svg","/_astro/EnvManager8Bit.Bj0swT5E.js","/_astro/MainApp.36csCZzh.js","/_astro/VersionFooter.DXs79lfP.js","/_astro/_slug_.DF4pp2Vg.css","/_astro/client.B7_wsQ6z.js","/_astro/index.BSy9ry4M.js","/_astro/index.GzzYzsTh.js","/_astro/jsx-runtime.D_zvdyIk.js","/_astro/trash-2.DDpJnp0d.js","/css/styles.css"],"buildFormat":"directory","checkOrigin":true,"serverIslandNameMap":[],"key":"RYo0v5QFIx9NMeRZsPnzqHaMMsdY6+EEbPvcSTn8dfQ=","sessionConfig":{"driver":"fs-lite","options":{"base":"/home/cory-ubuntu/coding/projects/env-manager/node_modules/.astro/sessions"}}});
 if (manifest.sessionConfig) manifest.sessionConfig.driverModule = () => import('./chunks/fs-lite_COtHaKzy.mjs');
 
 export { manifest };
